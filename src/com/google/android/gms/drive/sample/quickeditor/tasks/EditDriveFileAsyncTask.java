package com.google.android.gms.drive.sample.quickeditor.tasks;

import com.google.android.gms.GoogleApiClient;
import com.google.android.gms.PendingResult;
import com.google.android.gms.drive.Contents;
import com.google.android.gms.drive.Drive;
import com.google.android.gms.drive.DriveApi.ContentsResult;
import com.google.android.gms.drive.DriveFile;
import com.google.android.gms.drive.DriveFile.OnContentsClosedCallback;
import com.google.android.gms.drive.DriveFile.OnContentsOpenedCallback;
import com.google.android.gms.drive.DriveId;
import com.google.android.gms.drive.DriveResource.MetadataResult;
import com.google.android.gms.drive.DriveResource.OnMetadataUpdatedCallback;
import com.google.android.gms.drive.MetadataChangeSet;

import android.os.AsyncTask;

/**
 * TODO: Insert description here. (generated by burcud)
 */
public abstract class EditDriveFileAsyncTask extends AsyncTask<DriveId, Boolean, com.google.android.gms.Status> {

  private GoogleApiClient mClient;

  public EditDriveFileAsyncTask(GoogleApiClient client) {
    mClient = client;
  }

  public abstract Changes edit(Contents contents);

  @Override
  protected com.google.android.gms.Status doInBackground(DriveId... params) {
    DriveFile file = Drive.DriveApi.getFile(params[0]);
    try {
      PendingResult<ContentsResult, OnContentsOpenedCallback> openContentsResult =
          file.openContents(mClient, DriveFile.MODE_WRITE_ONLY, null);
      openContentsResult.await();
      if (!openContentsResult.get().getStatus().isSuccess()) {
        return openContentsResult.get().getStatus();
      }

      Changes changes = edit(openContentsResult.get().getContents());
      PendingResult<MetadataResult, OnMetadataUpdatedCallback> metadataResult = null;
      PendingResult<com.google.android.gms.Status, OnContentsClosedCallback> closeContentsResult = null;

      if (changes.getMetadataChangeSet() != null) {
        metadataResult = file.updateMetadata(mClient, changes.getMetadataChangeSet());
        metadataResult.await();
        if (!metadataResult.get().getStatus().isSuccess()) {
          return metadataResult.get().getStatus();
        }
      }

      if (changes.getContents() != null) {
        closeContentsResult = file.commitAndCloseContents(mClient, changes.getContents());
        closeContentsResult.await();
      }
      return closeContentsResult.get().getStatus();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    return null;
  }

  public class Changes {
    private MetadataChangeSet mMetadataChangeSet;
    private Contents mContents;

    public Changes(MetadataChangeSet metadataChangeSet, Contents contents) {
      mMetadataChangeSet = metadataChangeSet;
      mContents = contents;
    }

    public MetadataChangeSet getMetadataChangeSet() {
      return mMetadataChangeSet;
    }

    public Contents getContents() {
      return mContents;
    }
  }
}
